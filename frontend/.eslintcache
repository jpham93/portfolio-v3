[{"/home/james/Projects/portfolio-v3/frontend/src/App.tsx":"1","/home/james/Projects/portfolio-v3/frontend/src/index.tsx":"2","/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts":"3","/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx":"4","/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx":"5","/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx":"6","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx":"7","/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts":"8","/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts":"9"},{"size":2800,"mtime":1608083884705,"results":"10","hashOfConfig":"11"},{"size":500,"mtime":1607645065055,"results":"12","hashOfConfig":"11"},{"size":425,"mtime":1607460065719,"results":"13","hashOfConfig":"11"},{"size":2771,"mtime":1608138032376,"results":"14","hashOfConfig":"11"},{"size":814,"mtime":1608092279805,"results":"15","hashOfConfig":"11"},{"size":2573,"mtime":1608093697899,"results":"16","hashOfConfig":"11"},{"size":2899,"mtime":1608074584907,"results":"17","hashOfConfig":"11"},{"size":109,"mtime":1607972681457,"results":"18","hashOfConfig":"11"},{"size":1164,"mtime":1608137696526,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ukby1a",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/james/Projects/portfolio-v3/frontend/src/App.tsx",[],["40","41"],"/home/james/Projects/portfolio-v3/frontend/src/index.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx",["42","43","44","45"],"/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx",["46"],"import React from 'react';\nimport './GridLinks.scss';\nimport SocialLinksModel from '../../models/SocialLinks.model';\nimport GridLinksModel from '../../models/GridLinks.model';\nimport validateColor from 'validate-color';\n\nconst defaultGridColors = [\n  '#CD5C5C',\n  '#191970',\n  '#800080',\n  '#A52A2A',\n  '#000080',\n  '#FF4500',\n  '#B0E0E6'\n];\n\nconst defaultSocialGridColors = [\n  '#55acee',\n  '#3765a3',\n  '#ffb04f',\n  '#202020'\n];\n\nconst GridLinksView = (\n  { gridLinks, socialLinks }: { gridLinks: GridLinksModel[], socialLinks: SocialLinksModel[] },\n) => {\n\n  const gridTiles = gridLinks\n    .filter(menuLink => menuLink.name.toLowerCase() !== 'home') // remove home from the array\n    .map((menuLink, index) => {\n\n      let colSize = 4;\n      // special grid column sizes for first two links\n      if (index === 0) {\n        colSize = 7\n      } else if (index === 1) {\n        colSize = 5\n      }\n\n      // Determine tile's background based on API values (Order: image, given color, default color)\n      let backgroundStyle: {};\n      if (menuLink.link_img) {\n        const imgUrl = process.env.REACT_APP_API_URL + menuLink.link_img.url;\n        backgroundStyle = { backgroundImage: `url(${imgUrl})` };\n      } else if (menuLink.color && validateColor(menuLink.color)) {\n        backgroundStyle = { backgroundColor: menuLink.color };\n      } else {\n        backgroundStyle = { backgroundColor: defaultGridColors[index] };\n      }\n\n      return(\n        <div key={ index } className={ `p-col-${colSize} GridTile` } style={ backgroundStyle }>\n          <span className=\"GridTileText\">{ menuLink.alt_title || menuLink.name }</span>\n        </div>\n      );\n    });\n\n  const socialLinkGridTiles = socialLinks.map((socialLink, index) => {\n    // Determine tile's content based on API \"icon\" values\n    let content: string | JSX.Element = socialLink.name.toLocaleUpperCase();\n    if (socialLink.icon) {\n      const imgUrl = process.env.REACT_APP_API_URL + socialLink.icon.url;\n      content = <img className=\"SocialLinkIcon\" src={ imgUrl } />;\n    }\n\n    // Determine tile's background color based on API \"color\" values\n    let backgroundStyle: {} = {}; // assign to allow for spread regardless of condition\n    if (socialLink.color && validateColor(socialLink.color)) {\n      backgroundStyle = { ...backgroundStyle, backgroundColor: socialLink.color };\n    } else {\n      backgroundStyle = { ...backgroundStyle, backgroundColor: defaultSocialGridColors[index] };\n    }\n\n    return(\n      <div key={index} className=\"p-col-6 GridTile SocialGridTile\" style={ backgroundStyle }>\n        <span className=\"SocialLinkContent\">{ content }</span>\n      </div>\n    );\n  });\n\n  return(\n    <div className=\"p-grid GridContainer\">\n      { gridTiles }\n      <div className=\"p-col-4 p-grid GridTile SocialGridContainer\">\n        { socialLinkGridTiles }\n      </div>\n    </div>\n  );\n};\n\nexport default GridLinksView;\n","/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts",["47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":28},{"ruleId":"52","severity":1,"message":"56","line":5,"column":19,"nodeType":"54","messageId":"55","endLine":5,"endColumn":29},{"ruleId":"52","severity":1,"message":"57","line":22,"column":10,"nodeType":"54","messageId":"55","endLine":22,"endColumn":20},{"ruleId":"52","severity":1,"message":"58","line":28,"column":17,"nodeType":"54","messageId":"55","endLine":28,"endColumn":23},{"ruleId":"59","severity":1,"message":"60","line":63,"column":17,"nodeType":"61","endLine":63,"endColumn":66},{"ruleId":"62","severity":1,"message":"63","line":48,"column":6,"nodeType":"64","endLine":48,"endColumn":11,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'ToggleMenu' is defined but never used.","'dimensions' is assigned a value but never used.","'height' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'handleResize'. Either include it or remove the dependency array.","ArrayExpression",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [handleResize, ref]",{"range":"71","text":"72"},[1126,1131],"[handleResize, ref]"]