[{"/home/james/Projects/portfolio-v3/frontend/src/App.tsx":"1","/home/james/Projects/portfolio-v3/frontend/src/index.tsx":"2","/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts":"3","/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx":"4","/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx":"5","/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx":"6","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx":"7","/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts":"8","/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts":"9","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx":"10"},{"size":2883,"mtime":1608146173330,"results":"11","hashOfConfig":"12"},{"size":500,"mtime":1607645065055,"results":"13","hashOfConfig":"12"},{"size":425,"mtime":1607460065719,"results":"14","hashOfConfig":"12"},{"size":2851,"mtime":1608223889241,"results":"15","hashOfConfig":"12"},{"size":825,"mtime":1608144723891,"results":"16","hashOfConfig":"12"},{"size":2361,"mtime":1608145833114,"results":"17","hashOfConfig":"12"},{"size":3063,"mtime":1608224043745,"results":"18","hashOfConfig":"12"},{"size":109,"mtime":1607972681457,"results":"19","hashOfConfig":"12"},{"size":1164,"mtime":1608137696526,"results":"20","hashOfConfig":"12"},{"size":264,"mtime":1608183378268,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ukby1a",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/james/Projects/portfolio-v3/frontend/src/App.tsx",[],["45","46"],"/home/james/Projects/portfolio-v3/frontend/src/index.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx",["47","48"],"/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx",["49"],"import React, { useState, useEffect } from 'react';\nimport Header from '../../components/header/Header';\nimport GridLinksView from '../../components/gridLinks/GridLinks';\nimport SocialLinksModel from '../../models/SocialLinks.model';\nimport GridLinksModel from '../../models/GridLinks.model';\n\nconst Home = ({ gridLinks }: { gridLinks: GridLinksModel[] }) => {\n\n    const HEADER_HEIGHT = 400;\n\n    const [loading, setLoading]             = useState<boolean>(true);\n    const [headerProps, setHeaderProps ]    = useState<{ title: string, header_img: any, height?: number } | null>(null);\n    const [gridLinkProps, setGridLinkProps] = useState<{gridLinks: GridLinksModel[], socialLinks: SocialLinksModel[]} | null>(null);\n\n    useEffect(() => {\n      /**\n       * FETCH HOME PAGE DATA & SET STATE TO REFRESH\n       */\n      fetch(`${process.env.REACT_APP_API_URL!}/home-page`)\n        .then(res => res.json())\n        .then(data => {\n          /**\n           * LOAD PAGE CONTENT\n           */\n            // extract data\n          const { header_title, social_links } = data;\n\n          // @TODO - narrow down retrieval with future GraphQL implementation\n          const sLinks = social_links.map((link: any) => ({\n            name: link.name,\n            url: link.url,\n            icon: link.icon,\n            color: link.color\n          }));\n          setGridLinkProps({gridLinks: gridLinks, socialLinks: sLinks});\n\n          // set all state (if it applicable)\n          let headerImage = null;\n          if (data.header_img) {\n            headerImage =  data.header_img;\n          }\n          setHeaderProps({\n            title: header_title,\n            header_img: headerImage,\n            height: 400, // hardcoded for \"Home\" page. May apply to other pages\n          });\n          setLoading(false);\n        });\n\n    }, []);\n\n    // adjust main content based on starting screen size\n    const mainStyle = {\n      minHeight: `calc(100vh - var(--menu-height) - ${HEADER_HEIGHT}px)`\n    };\n\n    return(\n      <>\n        {\n          loading\n            ?\n            <h1>Loading...</h1>\n            :\n            <>\n              <Header {...headerProps!} />\n              <div className=\"Main\" style={ mainStyle }>\n                <GridLinksView {...gridLinkProps!} />\n              </div>\n            </>\n        }\n      </>\n    );\n};\n\nexport default Home;\n","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx",["50"],"/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts",["51"],"import ResizeObserver from 'resize-observer-polyfill';\nimport { RefObject, useCallback, useLayoutEffect, useState } from 'react';\n\nexport interface ResizeObserverEntry {\n  target: HTMLElement;\n  contentRect: DOMRectReadOnly;\n}\n\nexport const useResizeObserver = (\n  ref: RefObject<HTMLElement>,\n  callback?: (entry: DOMRectReadOnly) => void\n) => {\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (!Array.isArray(entries)) {\n        return;\n      }\n\n      const entry = entries[0];\n      setWidth(entry.contentRect.width);\n      setHeight(entry.contentRect.height);\n\n      if (callback) {\n        callback(entry.contentRect);\n      }\n    },\n    [callback]\n  );\n\n  useLayoutEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    // @ts-ignore @TODO - type error for constructor argument\n    let RO: any = new ResizeObserver((entries: ResizeObserverEntry[]) =>\n      handleResize(entries)\n    );\n    RO.observe(ref.current);\n\n    return () => {\n      RO.disconnect();\n      RO = null;\n    };\n  }, [ref]);\n\n  return [width, height];\n};\n","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":22,"column":10,"nodeType":"58","messageId":"59","endLine":22,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":28,"column":17,"nodeType":"58","messageId":"59","endLine":28,"endColumn":23},{"ruleId":"61","severity":1,"message":"62","line":50,"column":8,"nodeType":"63","endLine":50,"endColumn":10,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":69,"column":17,"nodeType":"67","endLine":69,"endColumn":66},{"ruleId":"61","severity":1,"message":"68","line":48,"column":6,"nodeType":"63","endLine":48,"endColumn":11,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'dimensions' is assigned a value but never used.","Identifier","unusedVar","'height' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gridLinks'. Either include it or remove the dependency array. If 'setGridLinkProps' needs the current value of 'gridLinks', you can also switch to useReducer instead of useState and read 'gridLinks' in the reducer.","ArrayExpression",["72"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useLayoutEffect has a missing dependency: 'handleResize'. Either include it or remove the dependency array.",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [gridLinks]",{"range":"78","text":"79"},"Update the dependencies array to be: [handleResize, ref]",{"range":"80","text":"81"},[1826,1828],"[gridLinks]",[1126,1131],"[handleResize, ref]"]