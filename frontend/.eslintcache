[{"/home/james/Projects/portfolio-v3/frontend/src/App.tsx":"1","/home/james/Projects/portfolio-v3/frontend/src/index.tsx":"2","/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts":"3","/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx":"4","/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx":"5","/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts":"6","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx":"7","/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx":"8","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx":"9","/home/james/Projects/portfolio-v3/frontend/src/pages/about/About.tsx":"10"},{"size":3022,"mtime":1608233135540,"results":"11","hashOfConfig":"12"},{"size":500,"mtime":1608226219856,"results":"13","hashOfConfig":"12"},{"size":425,"mtime":1607460065719,"results":"14","hashOfConfig":"12"},{"size":2851,"mtime":1608226219856,"results":"15","hashOfConfig":"12"},{"size":2477,"mtime":1608235079937,"results":"16","hashOfConfig":"12"},{"size":1164,"mtime":1608226219856,"results":"17","hashOfConfig":"12"},{"size":264,"mtime":1608226219856,"results":"18","hashOfConfig":"12"},{"size":776,"mtime":1608235224534,"results":"19","hashOfConfig":"12"},{"size":3204,"mtime":1608235257418,"results":"20","hashOfConfig":"12"},{"size":1434,"mtime":1608235309853,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ukby1a",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/james/Projects/portfolio-v3/frontend/src/App.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/index.tsx",[],["45","46"],"/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx",["47","48"],"import React, { useRef, useState } from 'react';\nimport './Menu.scss';\nimport { Toolbar, ToolbarProps } from 'primereact/toolbar';\nimport { NavLink } from 'react-router-dom';\nimport MenuPropsModel from '../../models/MenuProps.model';\nimport validateColor from 'validate-color';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\nimport ToggleMenu from '../toggleMenu/ToggleMenu';\n\n/**\n * Menu in header & footer. Displays links and branding.\n * @param Brand       -  {firstname: string, lastname: string}\n * @param pages       -  {name: string, url_slug: string}[]\n * @param inFooter\n * @param color\n * @param alt_color\n */\nconst Menu = ({ Brand, Links, inFooter, color, alt_color }: MenuPropsModel) => {\n\n  // Dynamic size tracking. @see - https://codesandbox.io/s/zw8kylol8m?file=/src/index.tsx:537-602 &\n  const ref = useRef(null);\n  const [dimensions, setDimensions] = useState({ top: 0, left: 0 });\n\n  // Optional callback to access the full DOMRect object if required.\n  const optionalCallback = (entry: DOMRectReadOnly) =>\n    setDimensions({ top: entry.x, left: entry.left });\n\n  const [width, height] = useResizeObserver(ref, optionalCallback);\n\n  const MenuLinks = () => (\n      <React.Fragment>\n        {\n          Links.map((link, index) => {\n            // consider for home path (no value)\n            const path = link.path ? link.path : '';\n            return (\n              <NavLink key={ index } to={ `/${path}` } className=\"MenuLink\" activeClassName=\"MenuLinkActive\">\n                { link.name }\n              </NavLink>\n            );\n          })\n        }\n      </React.Fragment>\n    );\n\n  // Special Top Menu Link configuration()\n  const TopMenuLinks = width < 992\n    ? () => <ToggleMenu menuProps={{ pageWrapId:\"PageWrap\", outerContainerId:\"OuterContainer\" }} links={MenuLinks()} />\n    : MenuLinks;\n\n  const MenuBrand = (props: ToolbarProps) => (\n    <React.Fragment>\n      <span className=\"MenuBrand\">\n        { Brand.firstname.toUpperCase() }\n        <strong>\n          { Brand.lastname.toUpperCase() }\n        </strong>\n      </span>\n    </React.Fragment>\n  );\n\n  // dynamic color for Header/Footer Menu\n  const menuStyle: React.CSSProperties = inFooter\n    // Footer menu styling\n    ? alt_color && validateColor(alt_color)\n      ? { backgroundColor: alt_color, position: 'relative' }\n      : { backgroundColor: 'var(--secondary-color)', position: 'relative' }\n    // Header Color\n    : color && validateColor(color)\n      ? { backgroundColor: color, position: 'absolute' }\n      : { backgroundColor: 'inherit', position: 'absolute' };\n\n  return(\n    <div className={`MenuWrapper ${inFooter && 'Footer'}`} id=\"PageWrap\" style={ menuStyle } ref={ ref }>\n      <Toolbar left={ MenuBrand } right={ !inFooter ? TopMenuLinks : MenuLinks } className=\"Menu Footer\" />\n    </div>\n  );\n};\n\nexport default Menu;\n","/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx",["49"],"/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts",["50"],"import ResizeObserver from 'resize-observer-polyfill';\nimport { RefObject, useCallback, useLayoutEffect, useState } from 'react';\n\nexport interface ResizeObserverEntry {\n  target: HTMLElement;\n  contentRect: DOMRectReadOnly;\n}\n\nexport const useResizeObserver = (\n  ref: RefObject<HTMLElement>,\n  callback?: (entry: DOMRectReadOnly) => void\n) => {\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (!Array.isArray(entries)) {\n        return;\n      }\n\n      const entry = entries[0];\n      setWidth(entry.contentRect.width);\n      setHeight(entry.contentRect.height);\n\n      if (callback) {\n        callback(entry.contentRect);\n      }\n    },\n    [callback]\n  );\n\n  useLayoutEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    // @ts-ignore @TODO - type error for constructor argument\n    let RO: any = new ResizeObserver((entries: ResizeObserverEntry[]) =>\n      handleResize(entries)\n    );\n    RO.observe(ref.current);\n\n    return () => {\n      RO.disconnect();\n      RO = null;\n    };\n  }, [ref]);\n\n  return [width, height];\n};\n","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx",["51","52"],"/home/james/Projects/portfolio-v3/frontend/src/pages/about/About.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":22,"column":10,"nodeType":"59","messageId":"60","endLine":22,"endColumn":20},{"ruleId":"57","severity":1,"message":"61","line":28,"column":17,"nodeType":"59","messageId":"60","endLine":28,"endColumn":23},{"ruleId":"62","severity":1,"message":"63","line":56,"column":8,"nodeType":"64","endLine":56,"endColumn":10,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":48,"column":6,"nodeType":"64","endLine":48,"endColumn":11,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":70,"column":17,"nodeType":"70","endLine":70,"endColumn":66},{"ruleId":"71","severity":1,"message":"72","line":82,"column":39,"nodeType":"73","endLine":82,"endColumn":54},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'dimensions' is assigned a value but never used.","Identifier","unusedVar","'height' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gridLinks'. Either include it or remove the dependency array. If 'setGridLinkProps' needs the current value of 'gridLinks', you can also switch to useReducer instead of useState and read 'gridLinks' in the reducer.","ArrayExpression",["76"],"React Hook useLayoutEffect has a missing dependency: 'handleResize'. Either include it or remove the dependency array.",["77"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [gridLinks]",{"range":"82","text":"83"},"Update the dependencies array to be: [handleResize, ref]",{"range":"84","text":"85"},[1942,1944],"[gridLinks]",[1126,1131],"[handleResize, ref]"]