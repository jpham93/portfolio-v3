[{"/home/james/Projects/portfolio-v3/frontend/src/App.tsx":"1","/home/james/Projects/portfolio-v3/frontend/src/index.tsx":"2","/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts":"3","/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx":"4","/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx":"5","/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx":"6","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx":"7","/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts":"8"},{"size":2327,"mtime":1608068146395,"results":"9","hashOfConfig":"10"},{"size":500,"mtime":1607645065055,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1607460065719,"results":"13","hashOfConfig":"12"},{"size":1169,"mtime":1607974377797,"results":"14","hashOfConfig":"12"},{"size":625,"mtime":1607974802806,"results":"15","hashOfConfig":"12"},{"size":1994,"mtime":1607989456491,"results":"16","hashOfConfig":"12"},{"size":2710,"mtime":1608069466787,"results":"17","hashOfConfig":"10"},{"size":109,"mtime":1607972681457,"results":"18","hashOfConfig":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q2y2b0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1ukby1a",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/james/Projects/portfolio-v3/frontend/src/App.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/index.tsx",[],["37","38"],"/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx",["39"],"import React, { useState, useEffect } from 'react';\nimport Header from '../../components/header/Header';\nimport GridLinksView from '../../components/gridLinks/GridLinks';\nimport SocialLinksModel from '../../models/SocialLinks.model';\nimport GridLinksModel from '../../models/GridLinks.model';\n\nconst Home = ({ gridLinks }: { gridLinks: GridLinksModel[] }) => {\n\n    const [loading, setLoading]           = useState<boolean>(true);\n    const [headerProps, setHeaderProps ]  = useState<{ title: string, header_img: any } | null>(null);\n    const [gridLinkProps, setGridLinkProps] = useState<{gridLinks: GridLinksModel[], socialLinks: SocialLinksModel[]} | null>(null);\n\n    useEffect(() => {\n      /**\n       * FETCH HOME PAGE DATA & SET STATE TO REFRESH\n       */\n      fetch(`${process.env.REACT_APP_API_URL!}/home-page`)\n        .then(res => res.json())\n        .then(data => {\n          /**\n           * LOAD PAGE CONTENT\n           */\n            // extract data\n          const { header_title, social_links } = data;\n\n          // @TODO - narrow down retrieval with future GraphQL implementation\n          const sLinks = social_links.map((link: any) => ({\n            name: link.name,\n            url: link.url,\n            icon: link.icon\n          }));\n          setGridLinkProps({gridLinks: gridLinks, socialLinks: sLinks});\n\n          // set all state (if it applicable)\n          let headerImage = null;\n          if (data.header_img) {\n            headerImage =  data.header_img;\n          }\n          setHeaderProps({\n            title: header_title,\n            header_img: headerImage\n          });\n\n          // indicate load is finished\n          setLoading(false);\n        });\n\n    }, []);\n\n    return(\n      <>\n        {\n          loading\n            ?\n            <h1>Loading...</h1>\n            :\n            <>\n              <Header {...headerProps!} />\n              <GridLinksView {...gridLinkProps!} />\n            </>\n        }\n      </>\n    );\n};\n\nexport default Home;\n","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx",["40"],"/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":48,"column":8,"nodeType":"47","endLine":48,"endColumn":10,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":62,"column":13,"nodeType":"51","messageId":"52","endLine":62,"endColumn":19},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gridLinks'. Either include it or remove the dependency array. If 'setGridLinkProps' needs the current value of 'gridLinks', you can also switch to useReducer instead of useState and read 'gridLinks' in the reducer.","ArrayExpression",["55"],"@typescript-eslint/no-unused-vars","'imgUrl' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [gridLinks]",{"range":"58","text":"59"},[1701,1703],"[gridLinks]"]