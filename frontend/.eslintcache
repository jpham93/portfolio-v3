[{"/home/james/Projects/portfolio-v3/frontend/src/App.tsx":"1","/home/james/Projects/portfolio-v3/frontend/src/index.tsx":"2","/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts":"3","/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx":"4","/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx":"5","/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx":"6","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx":"7","/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts":"8","/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts":"9","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx":"10"},{"size":2883,"mtime":1608146173330,"results":"11","hashOfConfig":"12"},{"size":500,"mtime":1607645065055,"results":"13","hashOfConfig":"12"},{"size":425,"mtime":1607460065719,"results":"14","hashOfConfig":"12"},{"size":2755,"mtime":1608146878070,"results":"15","hashOfConfig":"12"},{"size":825,"mtime":1608144723891,"results":"16","hashOfConfig":"12"},{"size":2361,"mtime":1608145833114,"results":"17","hashOfConfig":"12"},{"size":2899,"mtime":1608074584907,"results":"18","hashOfConfig":"12"},{"size":109,"mtime":1607972681457,"results":"19","hashOfConfig":"12"},{"size":1164,"mtime":1608137696526,"results":"20","hashOfConfig":"12"},{"size":286,"mtime":1608158915271,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ukby1a",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/james/Projects/portfolio-v3/frontend/src/App.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/index.tsx",[],["46","47"],"/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx",["48","49"],"/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx",["50"],"import React, { useState, useEffect } from 'react';\nimport Header from '../../components/header/Header';\nimport GridLinksView from '../../components/gridLinks/GridLinks';\nimport SocialLinksModel from '../../models/SocialLinks.model';\nimport GridLinksModel from '../../models/GridLinks.model';\n\nconst Home = ({ gridLinks }: { gridLinks: GridLinksModel[] }) => {\n\n    const HEADER_HEIGHT = 400;\n\n    const [loading, setLoading]             = useState<boolean>(true);\n    const [headerProps, setHeaderProps ]    = useState<{ title: string, header_img: any, height?: number } | null>(null);\n    const [gridLinkProps, setGridLinkProps] = useState<{gridLinks: GridLinksModel[], socialLinks: SocialLinksModel[]} | null>(null);\n\n    useEffect(() => {\n      /**\n       * FETCH HOME PAGE DATA & SET STATE TO REFRESH\n       */\n      fetch(`${process.env.REACT_APP_API_URL!}/home-page`)\n        .then(res => res.json())\n        .then(data => {\n          /**\n           * LOAD PAGE CONTENT\n           */\n            // extract data\n          const { header_title, social_links } = data;\n\n          // @TODO - narrow down retrieval with future GraphQL implementation\n          const sLinks = social_links.map((link: any) => ({\n            name: link.name,\n            url: link.url,\n            icon: link.icon,\n            color: link.color\n          }));\n          setGridLinkProps({gridLinks: gridLinks, socialLinks: sLinks});\n\n          // set all state (if it applicable)\n          let headerImage = null;\n          if (data.header_img) {\n            headerImage =  data.header_img;\n          }\n          setHeaderProps({\n            title: header_title,\n            header_img: headerImage,\n            height: 400, // hardcoded for \"Home\" page. May apply to other pages\n          });\n          setLoading(false);\n        });\n\n    }, []);\n\n    // adjust main content based on starting screen size\n    const mainStyle = {\n      minHeight: `calc(100vh - var(--menu-height) - ${HEADER_HEIGHT}px)`\n    };\n\n    return(\n      <>\n        {\n          loading\n            ?\n            <h1>Loading...</h1>\n            :\n            <>\n              <Header {...headerProps!} />\n              <div className=\"Main\" style={ mainStyle }>\n                <GridLinksView {...gridLinkProps!} />\n              </div>\n            </>\n        }\n      </>\n    );\n};\n\nexport default Home;\n","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx",["51"],"import React from 'react';\nimport './GridLinks.scss';\nimport SocialLinksModel from '../../models/SocialLinks.model';\nimport GridLinksModel from '../../models/GridLinks.model';\nimport validateColor from 'validate-color';\n\nconst defaultGridColors = [\n  '#CD5C5C',\n  '#191970',\n  '#800080',\n  '#A52A2A',\n  '#000080',\n  '#FF4500',\n  '#B0E0E6'\n];\n\nconst defaultSocialGridColors = [\n  '#55acee',\n  '#3765a3',\n  '#ffb04f',\n  '#202020'\n];\n\nconst GridLinksView = (\n  { gridLinks, socialLinks }: { gridLinks: GridLinksModel[], socialLinks: SocialLinksModel[] },\n) => {\n\n  const gridTiles = gridLinks\n    .filter(menuLink => menuLink.name.toLowerCase() !== 'home') // remove home from the array\n    .map((menuLink, index) => {\n\n      let colSize = 4;\n      // special grid column sizes for first two links\n      if (index === 0) {\n        colSize = 7\n      } else if (index === 1) {\n        colSize = 5\n      }\n\n      // Determine tile's background based on API values (Order: image, given color, default color)\n      let backgroundStyle: {};\n      if (menuLink.link_img) {\n        const imgUrl = process.env.REACT_APP_API_URL + menuLink.link_img.url;\n        backgroundStyle = { backgroundImage: `url(${imgUrl})` };\n      } else if (menuLink.color && validateColor(menuLink.color)) {\n        backgroundStyle = { backgroundColor: menuLink.color };\n      } else {\n        backgroundStyle = { backgroundColor: defaultGridColors[index] };\n      }\n\n      return(\n        <div key={ index } className={ `p-col-${colSize} GridTile` } style={ backgroundStyle }>\n          <span className=\"GridTileText\">{ menuLink.alt_title || menuLink.name }</span>\n        </div>\n      );\n    });\n\n  const socialLinkGridTiles = socialLinks.map((socialLink, index) => {\n    // Determine tile's content based on API \"icon\" values\n    let content: string | JSX.Element = socialLink.name.toLocaleUpperCase();\n    if (socialLink.icon) {\n      const imgUrl = process.env.REACT_APP_API_URL + socialLink.icon.url;\n      content = <img className=\"SocialLinkIcon\" src={ imgUrl } />;\n    }\n\n    // Determine tile's background color based on API \"color\" values\n    let backgroundStyle: {} = {}; // assign to allow for spread regardless of condition\n    if (socialLink.color && validateColor(socialLink.color)) {\n      backgroundStyle = { ...backgroundStyle, backgroundColor: socialLink.color };\n    } else {\n      backgroundStyle = { ...backgroundStyle, backgroundColor: defaultSocialGridColors[index] };\n    }\n\n    return(\n      <div key={index} className=\"p-col-6 GridTile SocialGridTile\" style={ backgroundStyle }>\n        <span className=\"SocialLinkContent\">{ content }</span>\n      </div>\n    );\n  });\n\n  return(\n    <div className=\"p-grid GridContainer\">\n      { gridTiles }\n      <div className=\"p-col-4 p-grid GridTile SocialGridContainer\">\n        { socialLinkGridTiles }\n      </div>\n    </div>\n  );\n};\n\nexport default GridLinksView;\n","/home/james/Projects/portfolio-v3/frontend/src/models/SocialLinks.model.ts",[],"/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts",["52"],"import ResizeObserver from 'resize-observer-polyfill';\nimport { RefObject, useCallback, useLayoutEffect, useState } from 'react';\n\nexport interface ResizeObserverEntry {\n  target: HTMLElement;\n  contentRect: DOMRectReadOnly;\n}\n\nexport const useResizeObserver = (\n  ref: RefObject<HTMLElement>,\n  callback?: (entry: DOMRectReadOnly) => void\n) => {\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (!Array.isArray(entries)) {\n        return;\n      }\n\n      const entry = entries[0];\n      setWidth(entry.contentRect.width);\n      setHeight(entry.contentRect.height);\n\n      if (callback) {\n        callback(entry.contentRect);\n      }\n    },\n    [callback]\n  );\n\n  useLayoutEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    // @ts-ignore @TODO - type error for constructor argument\n    let RO: any = new ResizeObserver((entries: ResizeObserverEntry[]) =>\n      handleResize(entries)\n    );\n    RO.observe(ref.current);\n\n    return () => {\n      RO.disconnect();\n      RO = null;\n    };\n  }, [ref]);\n\n  return [width, height];\n};\n","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":22,"column":10,"nodeType":"59","messageId":"60","endLine":22,"endColumn":20},{"ruleId":"57","severity":1,"message":"61","line":28,"column":17,"nodeType":"59","messageId":"60","endLine":28,"endColumn":23},{"ruleId":"62","severity":1,"message":"63","line":50,"column":8,"nodeType":"64","endLine":50,"endColumn":10,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":63,"column":17,"nodeType":"68","endLine":63,"endColumn":66},{"ruleId":"62","severity":1,"message":"69","line":48,"column":6,"nodeType":"64","endLine":48,"endColumn":11,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"@typescript-eslint/no-unused-vars","'dimensions' is assigned a value but never used.","Identifier","unusedVar","'height' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gridLinks'. Either include it or remove the dependency array. If 'setGridLinkProps' needs the current value of 'gridLinks', you can also switch to useReducer instead of useState and read 'gridLinks' in the reducer.","ArrayExpression",["73"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useLayoutEffect has a missing dependency: 'handleResize'. Either include it or remove the dependency array.",["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [gridLinks]",{"range":"79","text":"80"},"Update the dependencies array to be: [handleResize, ref]",{"range":"81","text":"82"},[1826,1828],"[gridLinks]",[1126,1131],"[handleResize, ref]"]