[{"/home/james/Projects/portfolio-v3/frontend/src/App.tsx":"1","/home/james/Projects/portfolio-v3/frontend/src/index.tsx":"2","/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts":"3","/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx":"4","/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx":"5","/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts":"6","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx":"7","/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx":"8","/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx":"9","/home/james/Projects/portfolio-v3/frontend/src/pages/about/About.tsx":"10"},{"size":3029,"mtime":1608243786180,"results":"11","hashOfConfig":"12"},{"size":500,"mtime":1608226219856,"results":"13","hashOfConfig":"12"},{"size":425,"mtime":1607460065719,"results":"14","hashOfConfig":"15"},{"size":2857,"mtime":1608243797096,"results":"16","hashOfConfig":"12"},{"size":2462,"mtime":1608246452689,"results":"17","hashOfConfig":"12"},{"size":1164,"mtime":1608226219856,"results":"18","hashOfConfig":"12"},{"size":264,"mtime":1608226219856,"results":"19","hashOfConfig":"12"},{"size":1359,"mtime":1608246908684,"results":"20","hashOfConfig":"12"},{"size":3204,"mtime":1608235257418,"results":"21","hashOfConfig":"12"},{"size":1640,"mtime":1608246855835,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q2y2b0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1ukby1a",{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/james/Projects/portfolio-v3/frontend/src/App.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/index.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/reportWebVitals.ts",[],["46","47"],"/home/james/Projects/portfolio-v3/frontend/src/components/menu/Menu.tsx",["48","49"],"/home/james/Projects/portfolio-v3/frontend/src/pages/home/Home.tsx",["50"],"/home/james/Projects/portfolio-v3/frontend/src/hooks/useResizeObserver.ts",["51"],"import ResizeObserver from 'resize-observer-polyfill';\nimport { RefObject, useCallback, useLayoutEffect, useState } from 'react';\n\nexport interface ResizeObserverEntry {\n  target: HTMLElement;\n  contentRect: DOMRectReadOnly;\n}\n\nexport const useResizeObserver = (\n  ref: RefObject<HTMLElement>,\n  callback?: (entry: DOMRectReadOnly) => void\n) => {\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (!Array.isArray(entries)) {\n        return;\n      }\n\n      const entry = entries[0];\n      setWidth(entry.contentRect.width);\n      setHeight(entry.contentRect.height);\n\n      if (callback) {\n        callback(entry.contentRect);\n      }\n    },\n    [callback]\n  );\n\n  useLayoutEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    // @ts-ignore @TODO - type error for constructor argument\n    let RO: any = new ResizeObserver((entries: ResizeObserverEntry[]) =>\n      handleResize(entries)\n    );\n    RO.observe(ref.current);\n\n    return () => {\n      RO.disconnect();\n      RO = null;\n    };\n  }, [ref]);\n\n  return [width, height];\n};\n","/home/james/Projects/portfolio-v3/frontend/src/components/toggleMenu/ToggleMenu.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/components/header/Header.tsx",[],"/home/james/Projects/portfolio-v3/frontend/src/components/gridLinks/GridLinks.tsx",["52","53"],"import React from 'react';\nimport './GridLinks.scss';\nimport SocialLinksModel from '../../models/SocialLinks.model';\nimport GridLinksModel from '../../models/GridLinks.model';\nimport validateColor from 'validate-color';\nimport { NavLink } from 'react-router-dom';\n\nconst defaultGridColors = [\n  '#CD5C5C',\n  '#191970',\n  '#800080',\n  '#A52A2A',\n  '#000080',\n  '#FF4500',\n  '#B0E0E6'\n];\n\nconst defaultSocialGridColors = [\n  '#55acee',\n  '#3765a3',\n  '#ffb04f',\n  '#202020'\n];\n\nconst GridLinksView = (\n  { gridLinks, socialLinks }: { gridLinks: GridLinksModel[], socialLinks: SocialLinksModel[] },\n) => {\n\n  const gridTiles = gridLinks\n    .filter(menuLink => menuLink.name.toLowerCase() !== 'home') // remove home from the array\n    .map((menuLink, index) => {\n\n      let colSize = 4;\n      // special grid column sizes for first two links\n      if (index === 0) {\n        colSize = 7\n      } else if (index === 1) {\n        colSize = 5\n      }\n\n      // Determine tile's background color based on API values\n      let backgroundStyle: {};\n      if (menuLink.color && validateColor(menuLink.color)) {\n        backgroundStyle = { backgroundColor: menuLink.color };\n      } else {\n        backgroundStyle = { backgroundColor: defaultGridColors[index] };\n      }\n\n      // Determine background image\n      let backgroundImage: {} = {};\n      if (menuLink.link_img) {\n        const imgUrl = process.env.REACT_APP_API_URL + menuLink.link_img.url;\n        backgroundImage = { backgroundImage: `url(${imgUrl})` };\n        backgroundStyle = { backgroundColor: '#fff' };\n      }\n\n      return(\n        <NavLink to={ `/${menuLink.path}` } key={ index } className={ `p-md-${colSize} p-col-12 GridTile` } style={ backgroundStyle }>\n          <div className=\"GridTileImg\" style={backgroundImage} />\n          <span className=\"GridTileText\">{ menuLink.alt_title || menuLink.name }</span>\n        </NavLink>\n      );\n    });\n\n  const socialLinkGridTiles = socialLinks.map((socialLink, index) => {\n    // Determine tile's content based on API \"icon\" values\n    let content: string | JSX.Element = socialLink.name.toLocaleUpperCase();\n    if (socialLink.icon) {\n      const imgUrl = process.env.REACT_APP_API_URL + socialLink.icon.url;\n      content = <img className=\"SocialLinkIcon\" src={ imgUrl } />;\n    }\n\n    // Determine tile's background color based on API \"color\" values\n    let backgroundStyle: {} = {}; // assign to allow for spread regardless of condition\n    if (socialLink.color && validateColor(socialLink.color)) {\n      backgroundStyle = { ...backgroundStyle, backgroundColor: socialLink.color };\n    } else {\n      backgroundStyle = { ...backgroundStyle, backgroundColor: defaultSocialGridColors[index] };\n    }\n\n    return(\n      <a href={ `${socialLink.url}` } target=\"_blank\" key={ index } className=\"p-col-6 GridTile SocialGridTile\" style={ backgroundStyle }>\n        <span className=\"SocialLinkContent\">{ content }</span>\n      </a>\n    );\n  });\n\n  return(\n    <div className=\"p-grid p-col-12 GridContainer\">\n      { gridTiles }\n      <div className=\"p-md-4 p-col-12 p-grid GridTile SocialGridContainer\">\n        { socialLinkGridTiles }\n      </div>\n    </div>\n  );\n};\n\nexport default GridLinksView;\n","/home/james/Projects/portfolio-v3/frontend/src/pages/about/About.tsx",["54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":22,"column":10,"nodeType":"61","messageId":"62","endLine":22,"endColumn":20},{"ruleId":"59","severity":1,"message":"63","line":28,"column":17,"nodeType":"61","messageId":"62","endLine":28,"endColumn":23},{"ruleId":"64","severity":1,"message":"65","line":56,"column":8,"nodeType":"66","endLine":56,"endColumn":10,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":48,"column":6,"nodeType":"66","endLine":48,"endColumn":11,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":70,"column":17,"nodeType":"72","endLine":70,"endColumn":66},{"ruleId":"73","severity":1,"message":"74","line":82,"column":39,"nodeType":"75","endLine":82,"endColumn":54},{"ruleId":"59","severity":1,"message":"76","line":1,"column":38,"nodeType":"61","messageId":"62","endLine":1,"endColumn":49},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"@typescript-eslint/no-unused-vars","'dimensions' is assigned a value but never used.","Identifier","unusedVar","'height' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gridLinks'. Either include it or remove the dependency array. If 'setGridLinkProps' needs the current value of 'gridLinks', you can also switch to useReducer instead of useState and read 'gridLinks' in the reducer.","ArrayExpression",["79"],"React Hook useLayoutEffect has a missing dependency: 'handleResize'. Either include it or remove the dependency array.",["80"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [gridLinks]",{"range":"85","text":"86"},"Update the dependencies array to be: [handleResize, ref]",{"range":"87","text":"88"},[1927,1929],"[gridLinks]",[1126,1131],"[handleResize, ref]"]